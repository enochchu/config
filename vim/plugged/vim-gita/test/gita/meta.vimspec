Describe gita#meta
  Before
    Init
  End

  Context #get({name}[, {default}, {expr}])
    It should return an empty string for unknown {name}
      let ret = gita#meta#get('unknown')
      Assert Equals(ret, '')
    End

    It should return {default} for unknown {name}
      let def = { 'foo': 'bar' }
      let ret = gita#meta#get('unknown', def)
      Assert Equals(ret, def)
    End

    It should return value in b:_gita_meta of known {name}
      let exp = { 'foo': 'bar' }
      let b:_gita_meta = { 'known': exp }
      let ret = gita#meta#get('known')
      Assert Equals(ret, exp)
    End

    It should return value in w:_gita_meta prior to b:_gita_meta of known {name}
      let exp1 = { 'foo': 'bar' }
      let exp2 = { 'hoge': 'piyo' }
      let b:_gita_meta = { 'known': exp1 }
      let w:_gita_meta = { 'known': exp2 }
      let ret = gita#meta#get('known')
      Assert Equals(ret, exp2)
    End
  End

  Context #set({name}, {value}[, {expr}])
    It should save {value} to {name} attribute of b:_gita_meta
      call gita#meta#set('known', 'foo')
      Assert Equals(b:_gita_meta.known, 'foo')
    End

    It should save {value} to {name} attribute of w:_gita_meta if w:_gita_meta is not empty
      let w:_gita_meta = { 'known': 'bar' }
      call gita#meta#set('known', 'foo')
      Throw Equals(b:_gita_meta.known, 'foo') /Undefined variables:/
      Assert Equals(w:_gita_meta.known, 'foo')
    End
  End

  Context #extend({meta}[, {expr}])
    It should extend b:_gita_meta with {meta}
      let meta = { 'foo': 'bar', 'hoge': 'piyo' }
      call gita#meta#extend(meta)
      Assert Equals(b:_gita_meta.foo, 'bar')
      Assert Equals(b:_gita_meta.hoge, 'piyo')
      Throw Equals(w:_gita_meta.foo, 'bar') /Undefined variables:/
      Throw Equals(w:_gita_meta.hoge, 'piyo') /Undefined variables:/
    End

    It should override b:_gita_meta with {meta} if b:_gita_meta exists
      let b:_gita_meta = { 'foo': 'foo', 'hoge': 'hoge' }
      let meta = { 'foo': 'bar', 'hoge': 'piyo' }
      call gita#meta#extend(meta)
      Assert Equals(b:_gita_meta.foo, 'bar')
      Assert Equals(b:_gita_meta.hoge, 'piyo')
      Throw Equals(w:_gita_meta.foo, 'bar') /Undefined variables:/
      Throw Equals(w:_gita_meta.hoge, 'piyo') /Undefined variables:/
    End

    It should override w:_gita_meta with {meta} if w:_gita_meta is not empty
      let w:_gita_meta = { 'foo': 'foo', 'hoge': 'hoge' }
      let meta = { 'foo': 'bar', 'hoge': 'piyo' }
      call gita#meta#extend(meta)
      Assert Equals(w:_gita_meta.foo, 'bar')
      Assert Equals(w:_gita_meta.hoge, 'piyo')
      Throw Equals(b:_gita_meta.foo, 'bar') /Undefined variables:/
      Throw Equals(b:_gita_meta.hoge, 'piyo') /Undefined variables:/
    End
  End
End
