Describe gita#compat
  Before
    Init
  End

  Context #doautocmd({name})
    Before
      let g:gita#_autocmd_called = 0
      augroup vim-gita-test-autocmd
        autocmd! *
        autocmd User vim-gita-test-autocmd let g:gita#_autocmd_called = 1
      augroup END
    End
    After
      unlet! g:gita#_autocmd_called
      augroup vim-gita-test-autocmd
        autocmd! *
      augroup END
    End

    It should successfully call a user defined autocmd
      let g:gita#_autocmd_called = 0
      call gita#compat#doautocmd('vim-gita-test-autocmd')
      Assert True(g:gita#_autocmd_called)
    End
  End

  Context #getbufvar({expr}, {varname}[, {default}])
    It should return a value of the buffer variable
      let b:_gita_getbufvar_test = 'foo'
      let ret = gita#compat#getbufvar('%', '_gita_getbufvar_test')
      Assert Equals(ret, 'foo')
    End

    It should return an empty string if the buffer variable does not exist
      let ret = gita#compat#getbufvar('%', '_gita_getbufvar_test')
      Assert Equals(ret, '')
    End

    It should return a specified value if the buffer variable does not exist
      let ret = gita#compat#getbufvar('%', '_gita_getbufvar_test', { 'foo': 'bar' })
      Assert Equals(ret, { 'foo': 'bar' })
    End
  End

  Context #getwinvar({winnr}, {varname}[, {default}])
    It should return a value of the window variable
      let w:_gita_getwinvar_test = 'foo'
      " Note: winnr == 0 := the current window
      let ret = gita#compat#getwinvar(0, '_gita_getwinvar_test')
      Assert Equals(ret, 'foo')
    End

    It should return an empty string if the window variable does not exist
      " Note: winnr == 0 := the current window
      let ret = gita#compat#getwinvar(0, '_gita_getwinvar_test')
      Assert Equals(ret, '')
    End

    It should return a specified value if the window variable does not exist
      " Note: winnr == 0 := the current window
      let ret = gita#compat#getwinvar(0, '_gita_getwinvar_test', { 'foo': 'bar' })
      Assert Equals(ret, { 'foo': 'bar' })
    End
  End
End
