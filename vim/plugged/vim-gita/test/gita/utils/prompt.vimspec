function! Capture(command) abort " {{{
  redir => contents
  silent execute a:command
  redir END
  return split(contents, '\v\r?\n')
endfunction" }}}

Describe gita#utils#prompt
  Before
    Init
  End

  Context #echo({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#echo("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#echo("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#echo("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #debug({msg}[, ...])

    It should echo a {msg} with a special prefix when g:gita#debug == 1
      let g:gita#debug = 1
      let ret = Capture('call gita#utils#prompt#debug("foo")')
      Assert Equals(ret, ['DEBUG: vim-gita: foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#debug("foo", "bar")'
            \)
      Assert Equals(ret, ['DEBUG: vim-gita: foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#debug("foo\nbar")'
            \)
      Assert Equals(ret, ['DEBUG: vim-gita: foo', 'bar'])
    End

    It should NOT echo a {msg} when g:gita#debug == 0
      let g:gita#debug = 0
      let ret = Capture('call gita#utils#prompt#debug("foo")')
      Assert Equals(ret, [])

      let ret = Capture(
            \ 'call gita#utils#prompt#debug("foo", "bar")'
            \)
      Assert Equals(ret, [])

      let ret = Capture(
            \ 'call gita#utils#prompt#debug("foo\nbar")'
            \)
      Assert Equals(ret, [])
    End
  End

  Context #info({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#info("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#info("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#info("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #warn({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#warn("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#warn("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#warn("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #error({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#error("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#error("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#warn("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #echomsg({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#echomsg("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#echomsg("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#echomsg("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #debugmsg({msg}[, ...])
    Before
      let stored_gita_debug = g:gita#debug
    End
    After
      let g:gita#debug = stored_gita_debug
    End

    It should echo a {msg} with a special prefix when g:gita#debug == 1
      let g:gita#debug = 1
      let ret = Capture('call gita#utils#prompt#debugmsg("foo")')
      Assert Equals(ret, ['DEBUG: vim-gita: foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#debugmsg("foo", "bar")'
            \)
      Assert Equals(ret, ['DEBUG: vim-gita: foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#debugmsg("foo\nbar")'
            \)
      Assert Equals(ret, ['DEBUG: vim-gita: foo', 'bar'])
    End

    It should NOT echo a {msg} when g:gita#debug == 0
      let g:gita#debug = 0
      let ret = Capture('call gita#utils#prompt#debugmsg("foo")')
      Assert Equals(ret, [])

      let ret = Capture(
            \ 'call gita#utils#prompt#debugmsg("foo", "bar")'
            \)
      Assert Equals(ret, [])

      let ret = Capture(
            \ 'call gita#utils#prompt#debugmsg("foo\nbar")'
            \)
      Assert Equals(ret, [])
    End
  End

  Context #infomsg({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#infomsg("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#infomsg("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#infomsg("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #warnmsg({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#warnmsg("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#warnmsg("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#warnmsg("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #errormsg({msg}[, ...])
    It should echo a {msg}
      let ret = Capture('call gita#utils#prompt#errormsg("foo")')
      Assert Equals(ret, ['foo'])

      let ret = Capture(
            \ 'call gita#utils#prompt#errormsg("foo", "bar")'
            \)
      Assert Equals(ret, ['foo bar'])

      let ret = Capture(
            \ 'call gita#utils#prompt#warnmsg("foo\nbar")'
            \)
      Assert Equals(ret, ['foo', 'bar'])
    End
  End

  Context #input({msg}[, {default}])
    It should show a prompt to user
      Assert True(exists('*gita#utils#prompt#input'))
    End
  End

  Context #ask({msg}[, {default}])
    It should show a prompt to user
      Assert True(exists('*gita#utils#prompt#ask'))
    End
  End

  Context #asktf({msg}[, {default}])
    It should show a prompt to user
      Assert True(exists('*gita#utils#prompt#asktf'))
    End
  End
End
