Describe gita#utils#help
  Before
    Init
  End

  Context #is_enable({name})
    It should return 0 for disabled {name}
      call gita#utils#help#disable('foo')
      Assert False(gita#utils#help#is_enabled('foo'))
    End

    It should return 1 for enabled {name}
      call gita#utils#help#enable('foo')
      Assert True(gita#utils#help#is_enabled('foo'))
    End
  End

  Context #enable({name})
    It should enable {name}
      call gita#utils#help#enable('foo')
      Assert True(gita#utils#help#is_enabled('foo'))
    End
  End

  Context #disable({name})
    It should disable {name}
      call gita#utils#help#disable('foo')
      Assert False(gita#utils#help#is_enabled('foo'))
    End
  End

  Context #toggle({name})
    It should toggle enable/disable of {name}
      call gita#utils#help#disable('foo')

      call gita#utils#help#toggle('foo')
      Assert True(gita#utils#help#is_enabled('foo'))
      call gita#utils#help#toggle('foo')
      Assert False(gita#utils#help#is_enabled('foo'))
    End
  End

  Context #read({name})
    It should return contents of {name} help
      let contents = gita#utils#help#read('short_format')
      Assert False(empty(contents))
    End

    It should throw an exception if {name} help is not found
      Throw gita#utils#help#read('foo') /vim-gita: No help file/
    End
  End

  Context #get({name})
    It should return contents of {name} help if {name} is enabled
      call gita#utils#help#enable('short_format')
      let contents = gita#utils#help#get('short_format')
      Assert False(empty(contents))
    End

    It should return an empty list if {name} is disabled
      call gita#utils#help#disable('short_format')
      let contents = gita#utils#help#get('short_format')
      Assert True(empty(contents))
    End
  End
End
