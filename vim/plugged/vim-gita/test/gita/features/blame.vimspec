let s:T = Import('DateTime')
let s:P = Import('System.Filepath')
let s:S = Import('Vim.ScriptLocal')
let s:sf = s:S.sfuncs(s:P.join(
      \ g:gita#test#root, 'autoload', 'gita', 'features', 'blame.vim'
      \))

Describe gita#features#blame
  Before
    Init
  End

  Context [PRIVATE] s:format_timestamp({timestamp}, {timezone}, {now})
    It should return 'about' if timedelta is less than 3 months
      let now = s:T.now('+03:00')
      let timestamp = now.to(s:T.delta(-60, 'day')).unix_time()
      let ret = s:sf.format_timestamp(timestamp, '+03:00', now)
      Assert Equals(ret, '2 months ago')
    End
    It should return '%d %b' if timedelta is more than 3 months
      let now = s:T.from_date(2000, 8, 1, 0, 0, 0, '+03:00')
      let timedelta = s:T.delta(-180, 'day')
      let timestamp = now.to(timedelta).unix_time()
      let ret = s:sf.format_timestamp(timestamp, '+03:00', now)
      Assert Equals(ret, 'on 03 Feb')
    End
  End

  Context [PRIVATE] s:format_chunk({chunk}, {width}, {wrap}, {now}, {is_detail})
    let chunk = {
          \ 'revision': 'rev1***--------------',
          \ 'linenum': {
          \   'original': 1,
          \   'final': 1,
          \ },
          \ 'nlines': 3,
          \ 'contents': [
          \   'foo',
          \   'bar',
          \   'hoge',
          \ ],
          \ 'author': 'lambdalisue',
          \ 'author_time': 0,
          \ 'author_tz': '',
          \ 'summary': 'this is a summary',
          \}
    It should return formatted text
      let now = s:T.now()
      let ret = s:sf.format_chunk(chunk, 50, 1, now, 0)
      Assert Equals(ret, [
            \ 'this is a summary',
            \ 'lambdalisue authored on 01 Jan, 1970      rev1***',
            \])
    End
    It should return formatted text even with very long summary
      let chunk.summary = repeat('*', 80)
      let now = s:T.now()
      let ret = s:sf.format_chunk(chunk, 50, 1, now, 0)
      Assert Equals(ret, [
            \ '************************************************',
            \ '********************************',
            \ 'lambdalisue authored on 01 Jan, 1970      rev1***',
            \])

      let ret = s:sf.format_chunk(chunk, 50, 0, now, 0)
      Assert Equals(ret, [
            \ '******************************************...***',
            \ 'lambdalisue authored on 01 Jan, 1970      rev1***',
            \])
    End
  End
End
