" Global utility functions
function! Import(...) abort " {{{
  if !exists('s:V')
    let s:V = vital#of('vital')
  endif
  return call(s:V.import, a:000, s:V)
endfunction " }}}
function! Mock(obj, name) abort " {{{
  let orig = get(a:obj, a:name)
  let mock = deepcopy(orig)
  let mock._obj = a:obj
  let mock._name = a:name
  let mock._orig = orig
  function! mock.patch() abort
    let self._obj[self._name] = self
    return self
  endfunction
  function! mock.restore() abort
    let self._obj[self._name] = self._orig
    return self
  endfunction
  return mock
endfunction " }}}
function! s:wipeout_all() abort " {{{
  let buflist = []
  for i in range(tabpagenr('$'))
    call extend(buflist, tabpagebuflist(i + 1))
  endfor
  for bufnum in buflist
    if bufexists(bufnum)
      silent execute printf('%dbwipeout!', bufnum)
    endif
  endfor
  bwipeout!
endfunction " }}}
function! s:workon_root() abort " {{{
  silent execute printf('cd %s', fnameescape(g:gita#test#root))
endfunction  " }}}
function! s:workon_inside() abort " {{{
  silent execute printf('cd %s', fnameescape(g:gita#test#inside))
endfunction  " }}}
function! s:workon_outside() abort " {{{
  silent execute printf('cd %s', fnameescape(g:gita#test#outside))
endfunction " }}}
function! s:init_config() abort " {{{
  let P = Import('System.Filepath')
  let S = Import('Vim.ScriptLocal')
  let sf = S.sfuncs(P.join('plugin', 'gita.vim'))
  call sf.assign_config()
  " bufname cannot contain ':' in Windows so force '_' in tests
  let g:gita#utils#buffer#separator = '_'
endfunction " }}}
function! s:init_buffer() abort " {{{
  call s:wipeout_all()
  enew!
  for key in keys(w:)
    silent! unlet w:[key]
  endfor
endfunction " }}}
function! s:init() abort " {{{
  call s:init_config()
  call s:init_buffer()
  call s:workon_root()
endfunction " }}}

command! Init          call s:init()
command! WorkonRoot    call s:workon_root()
command! WorkonInside  call s:workon_inside()
command! WorkonOutside call s:workon_outside()

function! s:setup() abort " {{{
  let g:gita#test = 1
  " Note:
  "   vital#of('vital') is not available in .themisrc
  let V = vital#of('vim_gita')
  let F = V.import('System.File')
  let P = V.import('System.Filepath')
  let R = V.import('Process')

  let g:gita#test#root = fnamemodify(resolve(getcwd()), ':p')

  " Create directories for test
  let temproot = fnamemodify(resolve(tempname()), ':p')
  let g:gita#test#inside  = P.join(temproot, 'inside')
  let g:gita#test#outside = P.join(temproot, 'outside')
  call mkdir(P.join(g:gita#test#inside, 'foo', 'bar'), 'p')
  call mkdir(P.join(g:gita#test#outside, 'foo', 'bar'), 'p')
  call writefile(['foo'], P.join(g:gita#test#inside, 'foo', 'bar', 'hoge.txt'))
  call writefile(['foo'], P.join(g:gita#test#outside, 'foo', 'bar', 'hoge.txt'))

  " Make a git repository
  call R.system(printf('git init %s', g:gita#test#inside))

  let g:is_windows = has('win16') || has('win32') || has('win64')
endfunction " }}}
call s:setup()

let s:assert = themis#helper('assert')
call themis#option('recursive', 1)
call themis#helper('command').with(s:assert)

"vim: sts=2 sw=2 smarttab et ai textwidth=0 fdm=marker ft=vim
